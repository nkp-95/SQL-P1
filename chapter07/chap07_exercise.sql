--7장 다중행 함수와 데이터 그룹화
--7-1 
SELECT SUM(SAL)
  FROM EMP;
-- SUM = 합계

--7-2
SELECT DEPTNO, SUM(SAL)  
  FROM EMP;
 -- GROUP BY DEPTNO;

--7-3 다중행 함수: NULL값 제외 처리
SELECT SUM(COMM) AS "추가 수당 합계"
  FROM EMP;

--7-4
SELECT SUM(DISTINCT SAL) --중복제거
     , SUM(ALL SAL)  --중복 제거x
     , SUM(SAL)
     , SUM(DISTINCT SAL) + 4250
  FROM EMP;

SELECT DISTINCT SAL FROM EMP;

--7-5 EMP 테이블 행 갯수 - 
--NULL값 빼고 계산하기 때문에 행숫자가 안맞음
SELECT COUNT(COMM)
     , COUNT(MGR)
     , COUNT(EMPNO)
     , COUNT(*)
     , COUNT(1)--첫번째 컬럼 카운팅  --실무
  FROM EMP;

--7-6 부서번호가 30번 직원수 
SELECT COUNT(*)
  FROM EMP
 WHERE DEPTNO = 30;

--7-7 
SELECT COUNT(DISTINCT SAL)
     , COUNT(ALL SAL)
     , COUNT(SAL)
  FROM EMP;  --NULL데이터는 반환갯수에서 제외
  
--7-8
SELECT COUNT(COMM)
  FROM EMP;  --4
--7-9
SELECT COUNT(COMM)
  FROM EMP
 WHERE COMM IS NOT NULL;  --4
 
--7-10 10번 부서에서 최대급여 출력
SELECT MAX(SAL)
  FROM EMP
 WHERE DEPTNO = 10;

--7-11 10번 부서에서 최소급여 출력
SELECT MIN(SAL)
  FROM EMP
 WHERE DEPTNO = 10;

--7-12 20번 부서에서 사원의 입사일중 제일 최근 입사일 출력
SELECT MAX(HIREDATE)
  FROM EMP
 WHERE DEPTNO = 20;  --1987/07/13
 
--7-13 20번 부서에서 사원의 입사일중 제일 오래된 입사일 출력
SELECT MIN(HIREDATE)
  FROM EMP
 WHERE DEPTNO = 20; --1980/12/17

--STDDEV 표준편차, VARIANCE 분산
SELECT CEIL(STDDEV(SAL)), CEIL(VARIANCE(SAL))
  FROM EMP;

--7-14  부서번호가 30인 사원들의 평균 급여 출력
SELECT CEIL(AVG(SAL))--올림값
     , FLOOR(AVG(SAL))--내림값
     , SIGN( 10 - 7 ) --양수면-1, 음수면 -1
     , SIGN( 7 - 10 )
     , SIGN( 7 - 7 )  --같으면 0
  FROM EMP
 WHERE DEPTNO = 30;
 
--7-15 DISTINCT 로 중복을 제거한 급여열의 평균 급여 구하기
SELECT AVG(DISTINCT SAL)
  FROM EMP
 WHERE DEPTNO = 30; 

--중간문제
SELECT COUNT(SALARY)
 FROM EMPLOYEES
 WHERE SALARY > 8000;
 
SELECT COUNT(HIRE_DATE)
  FROM EMPLOYEES
 WHERE HIRE_DATE > '20070101';

 
SELECT SUM(MAX_SALARY)
     , AVG(MAX_SALARY)
  FROM JOBS;
  --GROUP BY MAX_SALARY;
  
SELECT SUM(SALARY)
     , AVG(SALARY)
  FROM EMPLOYEES
  WHERE JOB_ID = 'IT_PROG';
 
SELECT FIRST_NAME, SALARY
     , AVG(NVL(COMMISSION_PCT, 0)) OVER (ORDER BY FIRST_NAME) AS COM_AVG
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID BETWEEN 50 AND 80;-- AND FIRST_NAME= 'David';
 
SELECT MIN(MAX_SALARY)
     , MAX(MAX_SALARY)
  FROM JOBS;
  
SELECT MIN(MAX_SALARY)
     , MAX(MAX_SALARY)
  FROM JOBS
 WHERE JOB_TITLE = 'Programmer';
  
SELECT MIN(HIRE_DATE), MAX(HIRE_DATE)
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = 50;
 
SELECT FIRST_NAME, SALARY
     , VARIANCE(SALARY) OVER (ORDER BY HIRE_DATE)
  FROM EMPLOYEES
 WHERE DEPARTMENT_ID = 100;



--07-2절 결과값을 원하는 열(컬럼)로 묶어 출력하는 GROUP BY 절
--7-16 집합 연산자
SELECT CEIL(AVG(SAL)), '10' AS DEPTNO FROM EMP WHERE DEPTNO = 10
UNION
SELECT CEIL(AVG(SAL)), '20' AS DEPTNO FROM EMP WHERE DEPTNO = 20
UNION
SELECT CEIL(AVG(SAL)), '30' AS DEPTNO FROM EMP WHERE DEPTNO = 30;

--7-17
SELECT CEIL(AVG(SAL)), DEPTNO
  FROM EMP
 GROUP BY DEPTNO;  --부서별로 출력 가능

--7-18 부서번호 및 직책별 평균 급여, 부서번호 및 직책별 정렬
SELECT DEPTNO, JOB, AVG(SAL)
  FROM EMP
 GROUP BY DEPTNO, JOB
 ORDER BY DEPTNO, JOB;
 
--7-19 GROUP BY 절에 없는 열을 SELECT열에 포함시 오류 발생
SELECT DEPTNO, JOB, AVG(SAL)
  FROM EMP
 GROUP BY DEPTNO; --오류:ORA-00979: GROUP BY 표현식이 아닙니다  <= 로 뜰수 있음
--SELECT와 GROUP BY 와 일치해야함
-- SELECT DEPTNO, JOB =>GROUP BY DEPTNO, JOB
--7-21
SELECT DISTINCT DEPTNO, CHG_SAL
  FROM(
    SELECT DEPTNO
         --, AVG(SAL) OVER (ORDER BY DEPTNO)
         , CEIL(AVG(SAL) OVER (ORDER BY DEPTNO)) AS CHG_SAL
      FROM EMP
);
--7-22
SELECT DEPTNO
     , CEIL(AVG(SAL))
  FROM EMP
  --WHERE AVG(SAL) > 2200 허용X
 GROUP BY DEPTNO
 HAVING AVG(SAL) > 2000 --GROUP BY 밑에 이렇게 적어야 가능
 ORDER BY DEPTNO;

--SELECT
--FROM
--WHERE
--GROUP BY
--ORDER BY
--순으로 써야함

--7-23
SELECT DEPTNO, JOB, AVG(SAL)
  FROM EMP
 WHERE SAL <= 3000
 GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
 ORDER BY DEPTNO, JOB;

--7-4장 그룹화와 관련된 여러 함수 = ROLLUP, CUBE, GROUPING SETS함수
--7-24 기존 GROUP BY 절만 사용한 그룹화
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), AVG(SAL)
  FROM EMP
 GROUP BY DEPTNO, JOB
 ORDER BY DEPTNO, JOB;

--7-25 ROLLUP 사용  --중간중간에 총계 표시해줌
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), TRUNC(AVG(SAL))
  FROM EMP
 GROUP BY ROLLUP( DEPTNO, JOB);
--ROLLUP(A, B)
/*
  1. A그룹별, B그룹에 해당하는 결과출력
  2. A그룹에 해당하는 결과 출력
  3. 전체 데이터 결과 출력
*/

 

--7-26 CUBE 사용 분야별로 직계 정리 마지막 줄엔 토탈
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), TRUNC(AVG(SAL))
  FROM EMP
 GROUP BY CUBE( DEPTNO, JOB)
 ORDER BY DEPTNO, JOB;
 /* CYBE(A, B) -해당 항목 모든 경우의 수를 모두 집계출력
    1. A그룹별, B그룹에 해당하는 결과출력
    2. A그룹에 해당하는 결과 출력
    3. B그룹에 해당하는 결과 출력
    4. 전체 데이터 결과 출력
*/


--7-27 DEPTNO 를 먼저 그룹화한 후 ROLLUP 함수에 JOB 지정 하기
SELECT DEPTNO, JOB, COUNT(*)
  FROM EMP
 GROUP BY DEPTNO, ROLLUP(JOB);  --부서번호별로 소계만 나옴

SELECT DEPTNO, JOB, COUNT(*)
  FROM EMP
 GROUP BY JOB, ROLLUP(DEPTNO);--직책별로 소계만


--7-29 GROUPING SETS 함수
SELECT DEPTNO, JOB, COUNT(*)
  FROM EMP
 GROUP BY GROUPING SETS(DEPTNO, JOB)
 ORDER BY DEPTNO, JOB;--부서 번호별로, 직책별로 

--7-30 DEPTNO, JOB 열의 그룹화 여부 확인 : GROUPING 
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), SUM(SAL), TRUNC(AVG(SAL))
     , GROUPING(DEPTNO)  
     , GROUPING(JOB)
  FROM EMP
 GROUP BY ROLLUP( DEPTNO, JOB);  --GROUPING => 0=그룹화 된것, 1= 그룹화 안된것 

SELECT DECODE(GROUPING(DEPTNO), 1, '총계', DEPTNO) AS DEPTNO
     , DECODE(GROUPING(JOB), 1, DECODE(GROUPING(DEPTNO), 1, ' ', '소계'), JOB) AS JOB
     , COUNT(*), MAX(SAL), SUM(SAL), TRUNC(AVG(SAL)) AS AVG
  --   , GROUPING(DEPTNO)  
  --   , GROUPING(JOB)
  FROM EMP
 GROUP BY ROLLUP( DEPTNO, JOB);

SELECT DEPTNO
  FROM EMP
 GROUP BY DEPTNO;
 
--7-33
SELECT DEPTNO, ENAME
  FROM EMP
 GROUP BY DEPTNO, ENAME;
 
--11G부터 사용 가능
--LISTAGG(): 부서별 사원 이름을 나란히 나열하여 출력
--7-34
SELECT DEPTNO
     , LISTAGG(ENAME, ', ')
       WITHIN GROUP (ORDER BY SAL DESC) AS ENAMES
  FROM EMP
 GROUP BY DEPTNO;

--7-38 DECODE문을 활용하여 PIVOT 함수와 같은 출력 구현
SELECT DEPTNO
     , MAX(DECODE(JOB, 'CLERK', SAL)) AS "CLERK"
     , MAX(DECODE(JOB, 'SALESMAN', SAL)) AS "SALESMAN"
     , MAX(DECODE(JOB, 'PRESIDENT', SAL)) AS "PRESIDENT"
     , MAX(DECODE(JOB, 'MANAGER', SAL)) AS "MANAGER"
     , MAX(DECODE(JOB, 'ANALYST', SAL)) AS "ANALYST"
  FROM EMP
 GROUP BY DEPTNO
 ORDER BY DEPTNO;
 
SELECT DEPTNO, JOB, MAX(SAL) FROM EMP GROUP BY DEPTNO, JOB;

--7-39
SELECT *
    FROM(
    SELECT DEPTNO
         , MAX(DECODE(JOB, 'CLERK', SAL)) AS "CLERK"
         , MAX(DECODE(JOB, 'SALESMAN', SAL)) AS "SALESMAN"
         , MAX(DECODE(JOB, 'PRESIDENT', SAL)) AS "PRESIDENT"
         , MAX(DECODE(JOB, 'MANAGER', SAL)) AS "MANAGER"
         , MAX(DECODE(JOB, 'ANALYST', SAL)) AS "ANALYST"
      FROM EMP
     GROUP BY DEPTNO
     ORDER BY DEPTNO
     )
     UNPIVOT(
     SAL FOR JOB IN (CLERK, SALESMAN, PRESIDENT, MANAGER, ANALYST)
     )
     ;
 
--7-36 RIVOT 함수 :직책별 부서 최고급여
SELECT *
  FROM (SELECT DEPTNO, JOB, SAL
          FROM EMP)
 PIVOT(MAX(SAL)
       FOR DEPTNO IN (10, 20, 30))
 ORDER BY JOB;
 
--7-37 부서별 직책 최고 급여 2차원 표 형태로 출력
SELECT *
  FROM (SELECT JOB, DEPTNO, SAL
          FROM EMP)
 PIVOT(MAX(SAL)
       FOR JOB IN ('CLERK' AS CLERK,
                    'SALESMAN' AS SALESMAN,
                    'PRESIDENT' AS PRESIDENT,
                    'MANAGER' AS MANAGER,
                    'ANALYST' AS ANALYST
                    ))
 ORDER BY DEPTNO;


SELECT *
  FROM (SELECT ENAME, JOB, SAL, COMM, HIREDATE
          FROM EMP)
 PIVOT(MAX(HIREDATE)
       FOR ENAME IN ('ENAME' AS ENAME))
 ORDER BY JOB;
 
SELECT *
  FROM(SELECT FIRST_NAME, EMPLOYEE_ID, SALARY
         FROM EMPLOYEES)
  PIVOT(MAX(SALARY)
        FOR FIRST_NAME IN ('FIRST_NAME' AS FIRST_NAME))
 ORDER BY EMPLOYEE_ID;
 
--문제
SELECT DEPTNO, TRUNC(AVG(SAL), 0),MAX(SAL), MIN(SAL), COUNT(DEPTNO)
  FROM EMP
 GROUP BY DEPTNO;
 
SELECT JOB, COUNT(*)
  FROM EMP 
 GROUP BY JOB
 HAVING COUNT(JOB) >= 3;
 
SELECT TO_CHAR(HIREDATE, 'YYYY') AS HIREYEAR, DEPTNO, COUNT(*) AS CNT
  FROM EMP
  GROUP BY TO_CHAR(HIREDATE, 'YYYY'), DEPTNO;
  
SELECT NVL2(COMM, 'O', 'X') AS EXIST_COMM  --존재하면 O, 없으면 X
     , COUNT(*) AS CNT
  FROM EMP
 GROUP BY NVL2(COMM, 'O', 'X');  --있는것 O로 카운트, 없는것 X로 카운트
 
SELECT DEPTNO
     , TO_CHAR(HIREDATE, 'YYYY') AS HIREYEAR
     , COUNT(*) AS CNT
     , MAX(SAL) AS MAX_SAL
     , SUM(SAL) AS SUM_SAL
     , TRUNC(AVG(SAL)) AS AVG_SAL
     FROM EMP
 GROUP BY ROLLUP(DEPTNO, TO_CHAR(HIREDATE, 'YYYY'));

SELECT DECODE(GROUPING(DEPTNO), 1, '총계', DEPTNO) AS DEPTNO
     , DECODE(GROUPING(TO_CHAR(HIREDATE, 'YYYY')), 1, --HD가 1일때 소계 표시
                      DECODE(GROUPING(DEPTNO),1, ' ','소계'),-- 한번더 DECODE로 싸서 DEPTNO가 1일땐 공백 표시
                        TO_CHAR(HIREDATE, 'YYYY')) AS HIREYEAR
     , COUNT(*) AS CNT
     , MAX(SAL) AS MAX_SAL
     , SUM(SAL) AS SUM_SAL
     , TRUNC(AVG(SAL)) AS AVG_SAL
     ,GROUPING(DEPTNO) DEPTNO
     ,GROUPING(TO_CHAR(HIREDATE, 'YYYY')) HD
     FROM EMP
 GROUP BY ROLLUP(DEPTNO, TO_CHAR(HIREDATE, 'YYYY'));

--1.부서번호 10번인 사원들의 사원 본호, 사원 이름, 월급을 출력 하시오.
SELECT EMPNO AS 사원번호, ENAME AS 사원이름, SAL AS 월급
  FROM EMP
 WHERE DEPTNO = 10;
 
--2. 사원번호 7369인 사원 이름, 입사일, 부서번호를 출력하시오
SELECT ENAME AS  사원이름, HIREDATE 입사일, DEPTNO 부서번호
  FROM EMP
 WHERE EMPNO = 7369;
--3. 사원번호 7300 크고 7400 작은 사원 이름, 입사일, 부서번호를 출력하시오. 
SELECT ENAME 사언이름, HIREDATE 입사일, DEPTNO 부서번호
  FROM EMP
 WHERE EMPNO > 7300 AND EMPNO < 7400;
-- 4. EMPLOYEE 모든 정보를 (사원번호 기준 내림차순으로) 검색하시오. 
SELECT *
  FROM EMP
 ORDER BY EMPNO DESC;
-- 5. 이름이 S로 시작하는 모든 사람의 사원번호와 이름을 출력하시오.   
SELECT *
  FROM EMP
 WHERE ENAME LIKE 'S%';


SELECT HIREDATE
  FROM EMP;
